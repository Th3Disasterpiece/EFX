<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="DJ_ToolBox01" label="DJ_ToolBox01">
    <memberTool name="openFile1"/>
    <memberTool name="TakeUp"/>
    <memberTool name="setShotRange0"/>
    <memberTool name="rename_geoPrep"/>
  </toolshelf>

  <tool name="setShotRange0" label="Set Shot Range" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>CHOP</contextNetType>
      <contextNetType>ROP</contextNetType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>COP2</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>TOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[from PySide2 import QtWidgets, QtCore
import hou

class ShotRangeUI(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(ShotRangeUI, self).__init__(parent)

        # Create the UI elements
        self.start_frame = QtWidgets.QLineEdit()
        self.end_frame = QtWidgets.QLineEdit()
        self.ok_button = QtWidgets.QPushButton("OK")
        self.check_box = QtWidgets.QCheckBox("Use Custom Range")

        # Create the layout
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.check_box)
        layout.addWidget(QtWidgets.QLabel("Start Frame:"))
        layout.addWidget(self.start_frame)
        layout.addWidget(QtWidgets.QLabel("End Frame:"))
        layout.addWidget(self.end_frame)
        layout.addWidget(self.ok_button)
        self.setLayout(layout)

        # Connect the "OK" button to the function that sets the timeline range
        self.ok_button.clicked.connect(self.setTimelineRange)
        self.check_box.stateChanged.connect(self.toggleCustomRange)

        # Disable the start and end frame inputs by default
        self.start_frame.setEnabled(False)
        self.end_frame.setEnabled(False)

    def toggleCustomRange(self, state):
        if state == QtCore.Qt.Checked:
            # Enable the start and end frame inputs
            self.start_frame.setEnabled(True)
            self.end_frame.setEnabled(True)
        else:
            # Disable the start and end frame inputs and set the default range
            self.start_frame.setEnabled(False)
            self.end_frame.setEnabled(False)
            self.start_frame.setText("1001")
            self.end_frame.setText("1200")

    def setTimelineRange(self):
        if self.check_box.isChecked():
            # Get the values entered by the user
            start = int(self.start_frame.text())
            end = int(self.end_frame.text())
        else:
            # Use the default range
            start = 1001
            end = 1200

        # Set the timeline range in Houdini
        hou.playbar.setFrameRange(start, end)

        # Close the UI
        self.close()

# Show the UI
ui = ShotRangeUI()
ui.show()
]]></script>
  </tool>

  <tool name="setShotRange" label="Set Shot Range" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[print 'set']]></script>
  </tool>

  <tool name="TakeUp" label="Take Up" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>CHOP</contextNetType>
      <contextNetType>ROP</contextNetType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>COP2</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>TOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import os
import hou

def save_incremented_version():
    current_file = hou.hipFile.name()
    base_file, ext = os.path.splitext(current_file)

    # Split the base file name by "_" to get the name and version components
    base_components = base_file.split("_")
    name = "_".join(base_components[:-1])
    version = base_components[-1]

    # Extract the version number and increment it
    try:
        version_num = int(version[1:]) + 1
        new_version = "t{:03d}".format(version_num)
    except ValueError:
        # The version string is not a number, just use the original string
        new_version = version

    # Create the new file name
    new_file = "{}_{}{}".format(name, new_version, ext)

    # Save the file with the incremented version
    hou.hipFile.save(file_name=new_file)

# Add the function as a menu item in the File menu
save_incremented_version()
]]></script>
  </tool>

  <tool name="openFile1" label="Open File" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>CHOP</contextNetType>
      <contextNetType>ROP</contextNetType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>COP2</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>TOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import hou
import os

from PySide2 import QtWidgets, QtGui, QtCore
from PySide2.QtCore import Qt

class FileOpenUI(QtWidgets.QWidget):    
    def __init__(self, parent=None):
        super(FileOpenUI, self).__init__(parent)
    
        # Create a layout and add a splitter widget
        layout = QtWidgets.QVBoxLayout(self)
        splitter = QtWidgets.QSplitter(self)
        layout.addWidget(splitter)
    
        # Add a bookmark column to the splitter
        self.bookmark_model = QtGui.QStandardItemModel(self)
        self.bookmark_view = QtWidgets.QListView(self)
        self.bookmark_view.setModel(self.bookmark_model)
        self.bookmark_view.setMinimumWidth(10)  # Set the minimum width of the bookmark list pane
        splitter.addWidget(self.bookmark_view)
    
        # Add a file system model and tree view to the splitter
        self.model = QtWidgets.QFileSystemModel()
        self.model.setRootPath("/jobs")  # Set the default root path
        self.tree_view = QtWidgets.QTreeView(self)
        self.tree_view.setModel(self.model)
        
        self.tree_view.setRootIndex(self.model.index("/jobs"))  # Set the default root index
        
        # Set the column width of the "Name" column to a larger value
        self.tree_view.setColumnWidth(0, 300)
        splitter.addWidget(self.tree_view)
        
        # Set the sizes of the panes in the splitter
        splitter.setSizes([50, 200])  # Reduce the size of the left pane
        
        # Add a line edit widget for the file path
        self.file_path_edit = QtWidgets.QLineEdit(self)
        self.file_path_edit.setReadOnly(True)  # Make the line edit read-only
        layout.insertWidget(0, self.file_path_edit)  # Insert the line edit at the top of the layout
        
        # Add a combo box widget for the file extension
        self.file_ext_combo = QtWidgets.QComboBox(self)
        self.file_ext_combo.addItem(".hip")
        self.file_ext_combo.addItem(".hipnc")
        self.file_ext_combo.addItem(".bgeo")
        self.file_ext_combo.addItem(".obj")
        self.file_ext_combo.addItem(".fbx")
        layout.insertWidget(1, self.file_ext_combo)  # Insert the combo box below the line edit

        
        # Add a horizontal layout to hold the open and cancel buttons
        button_layout = QtWidgets.QHBoxLayout()
        layout.addLayout(button_layout)
        
        # Add an "Open" button
        open_button = QtWidgets.QToolButton(self)
        open_button.setText("Open")
        open_button.setIcon(QtGui.QIcon("path/to/icon.png"))
        open_button.setIconSize(QtCore.QSize(16, 16))
        open_button.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
        open_button.clicked.connect(self.open_file)
        button_layout.addWidget(open_button)
        
        # Add a "Cancel" button
        cancel_button = QtWidgets.QPushButton("Cancel", self)
        button_layout.addWidget(cancel_button)

        # Set the size of the cancel button to the same size as the open button
        cancel_button.setFixedSize(open_button.sizeHint())
        
        # Set the alignment of the buttons to the right
        button_layout.setAlignment(Qt.AlignRight)
        
        
        # Add a "Open" button
        #open_button = QtWidgets.QPushButton("Open", self)
        #open_button.clicked.connect(self.open_file)
        #layout.addWidget(open_button)
    
        # Add a "Bookmark" button
        #bookmark_button = QtWidgets.QPushButton("Bookmark", self)
        #bookmark_button.clicked.connect(self.bookmark_folder)
        #layout.addWidget(bookmark_button)

        # Add a label to display the file path and extension
        self.file_label = QtWidgets.QLabel(self)
        layout.addWidget(self.file_label)
        
        # Connect the tree view's selection changed signal to a slot
        self.tree_view.selectionModel().selectionChanged.connect(self.update_file_label)
        
        
        # Set the size policy of the main widget to expanding
        self.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        ## Set the minimum and maximum sizes of the main widget
        self.setMinimumSize(1000, 600)
        self.setMaximumSize(1300, 800)
        # Set the size policy of the widget to allow resizing
        self.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        
    def open_file(self):
        # Get the selected file path
        file_path = self.model.filePath(self.tree_view.currentIndex())
        
        # Open the file in Houdini
        hou.hipFile.load(file_path)
        
    def bookmark_folder(self):
        # Get the selected folder path
        folder_path = self.model.filePath(self.tree_view.currentIndex())
        
        # Add the folder to the bookmark list
        item = QtGui.QStandardItem(folder_path)
        self.bookmark_model.appendRow(item)
        
#    def update_file_label(self):
        # Get the selected file path and extension
#        file_path = self.model.filePath(self.tree_view.currentIndex())
#        file_ext = os.path.splitext(file_path)[1]
    
    def update_file_label(self):
        # Get the selected file path and extension
        file_path = self.model.filePath(self.tree_view.currentIndex())
        file_ext = os.path.splitext(file_path)[1]
    
        # Set the text of the line edit widget to the file path
        self.file_path_edit.setText(file_path)
    
        # Set the current item of the combo box widget to the file extension
        index = self.file_ext_combo.findText(file_ext)
        self.file_ext_combo.setCurrentIndex(index)

        
        
# Create the UI
ui = FileOpenUI()

# Set the window title
ui.setWindowTitle("Almighty Open")

# Set the window size
#ui.resize(1300, 600)

# Set the window position
#ui.move(100, 100)

# Show the window
ui.show()

]]></script>
  </tool>

  <tool name="openFile" label="Open File" icon="PLASMA_App">
    <toolMenuContext name="network">
      <contextNetType>OBJ</contextNetType>
      <contextNetType>SOP</contextNetType>
      <contextNetType>CHOP</contextNetType>
      <contextNetType>ROP</contextNetType>
      <contextNetType>SHOP</contextNetType>
      <contextNetType>COP2</contextNetType>
      <contextNetType>VOP</contextNetType>
      <contextNetType>VOPNET</contextNetType>
      <contextNetType>DOP</contextNetType>
      <contextNetType>TOP</contextNetType>
      <contextNetType>LOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import hou
import os

from PySide2 import QtWidgets, QtGui, QtCore
from PySide2.QtCore import Qt

class FileOpenUI(QtWidgets.QWidget):    
    def __init__(self, parent=None):
        super(FileOpenUI, self).__init__(parent)
    
        # Create a layout and add a splitter widget
        layout = QtWidgets.QVBoxLayout(self)
        splitter = QtWidgets.QSplitter(self)
        layout.addWidget(splitter)
    
        # Add a bookmark column to the splitter
        self.bookmark_model = QtGui.QStandardItemModel(self)
        self.bookmark_view = QtWidgets.QListView(self)
        self.bookmark_view.setModel(self.bookmark_model)
        self.bookmark_view.setMinimumWidth(10)  # Set the minimum width of the bookmark list pane
        splitter.addWidget(self.bookmark_view)
    
        # Add a file system model and tree view to the splitter
        self.model = QtWidgets.QFileSystemModel()
        self.model.setRootPath("/Users/deepak/ContentCreation/jobs")  # Set the default root path
        self.tree_view = QtWidgets.QTreeView(self)
        self.tree_view.setModel(self.model)
        
        self.tree_view.setRootIndex(self.model.index("/Users/deepak/ContentCreation/jobs"))  # Set the default root index
        
        # Set the column width of the "Name" column to a larger value
        self.tree_view.setColumnWidth(0, 300)
        splitter.addWidget(self.tree_view)
        
        # Set the sizes of the panes in the splitter
        splitter.setSizes([50, 200])  # Reduce the size of the left pane
        
        # Add a line edit widget for the file path
        self.file_path_edit = QtWidgets.QLineEdit(self)
        self.file_path_edit.setReadOnly(True)  # Make the line edit read-only
        layout.insertWidget(0, self.file_path_edit)  # Insert the line edit at the top of the layout
        
        # Add a combo box widget for the file extension
        self.file_ext_combo = QtWidgets.QComboBox(self)
        self.file_ext_combo.addItem(".hip")
        self.file_ext_combo.addItem(".hipnc")
        self.file_ext_combo.addItem(".bgeo")
        self.file_ext_combo.addItem(".obj")
        self.file_ext_combo.addItem(".fbx")
        layout.insertWidget(1, self.file_ext_combo)  # Insert the combo box below the line edit

        
        # Add a horizontal layout to hold the open and cancel buttons
        button_layout = QtWidgets.QHBoxLayout()
        layout.addLayout(button_layout)
        
        # Add an "Open" button
        open_button = QtWidgets.QToolButton(self)
        open_button.setText("Open")
        open_button.setIcon(QtGui.QIcon("path/to/icon.png"))
        open_button.setIconSize(QtCore.QSize(16, 16))
        open_button.setToolButtonStyle(Qt.ToolButtonTextBesideIcon)
        open_button.clicked.connect(self.open_file)
        button_layout.addWidget(open_button)
        
        # Add a "Cancel" button
        cancel_button = QtWidgets.QPushButton("Cancel", self)
        button_layout.addWidget(cancel_button)

        # Set the size of the cancel button to the same size as the open button
        cancel_button.setFixedSize(open_button.sizeHint())
        
        # Set the alignment of the buttons to the right
        button_layout.setAlignment(Qt.AlignRight)
        
        
        # Add a "Open" button
        #open_button = QtWidgets.QPushButton("Open", self)
        #open_button.clicked.connect(self.open_file)
        #layout.addWidget(open_button)
    
        # Add a "Bookmark" button
        #bookmark_button = QtWidgets.QPushButton("Bookmark", self)
        #bookmark_button.clicked.connect(self.bookmark_folder)
        #layout.addWidget(bookmark_button)

        # Add a label to display the file path and extension
        self.file_label = QtWidgets.QLabel(self)
        layout.addWidget(self.file_label)
        
        # Connect the tree view's selection changed signal to a slot
        self.tree_view.selectionModel().selectionChanged.connect(self.update_file_label)
        
        
        # Set the size policy of the main widget to expanding
        self.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        ## Set the minimum and maximum sizes of the main widget
        self.setMinimumSize(1000, 600)
        self.setMaximumSize(1300, 800)
        # Set the size policy of the widget to allow resizing
        self.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)

        
    def open_file(self):
        # Get the selected file path
        file_path = self.model.filePath(self.tree_view.currentIndex())
        
        # Open the file in Houdini
        hou.hipFile.load(file_path)
        
    def bookmark_folder(self):
        # Get the selected folder path
        folder_path = self.model.filePath(self.tree_view.currentIndex())
        
        # Add the folder to the bookmark list
        item = QtGui.QStandardItem(folder_path)
        self.bookmark_model.appendRow(item)
        
#    def update_file_label(self):
        # Get the selected file path and extension
#        file_path = self.model.filePath(self.tree_view.currentIndex())
#        file_ext = os.path.splitext(file_path)[1]
    
    def update_file_label(self):
        # Get the selected file path and extension
        file_path = self.model.filePath(self.tree_view.currentIndex())
        file_ext = os.path.splitext(file_path)[1]
    
        # Set the text of the line edit widget to the file path
        self.file_path_edit.setText(file_path)
    
        # Set the current item of the combo box widget to the file extension
        index = self.file_ext_combo.findText(file_ext)
        self.file_ext_combo.setCurrentIndex(index)

        
        
# Create the UI
ui = FileOpenUI()

# Set the window title
ui.setWindowTitle("Almighty Open")

# Set the window size
#ui.resize(1300, 600)

# Set the window position
#ui.move(100, 100)

# Show the window
ui.show()

]]></script>
  </tool>

  <tool name="rename_geoPrep" label="Rename GeoPrep" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import hou

sel = hou.selectedNodes()

for each in sel:
    nodeName = each.name()
    ]]></script>
  </tool>
</shelfDocument>
