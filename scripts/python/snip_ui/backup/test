import os
import json
from datetime import datetime
import hou
from PySide2 import QtWidgets, QtCore, QtGui
import toolutils
import re
from PIL import ImageGrab  # Added for screenshot functionality

class WriteSnipUI(QtWidgets.QWidget):
    lib_path = hou.getenv("EFX")
    CORE_PATH = f'{lib_path}/pyDump'

    def __init__(self):
        super(WriteSnipUI, self).__init__()

        # Initialize the UI window
        self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)
        self.setWindowTitle("Write Snip UI")
        self.setGeometry(200, 200, 400, 600)  # Increased the height to accommodate new features

        # Create and initialize UI elements
        self.init_ui()

        # Connect the destroyed signal to the close method
        self.destroyed.connect(self.close)

    def init_ui(self):
        layout = QtWidgets.QVBoxLayout()

        # Select Save Path Button
        select_path_layout = QtWidgets.QHBoxLayout()
        # Existing code for select path...
        layout.addLayout(select_path_layout)

        layout.addSpacing(10)

        # File Name Label
        # Existing code for file name label...
        layout.addWidget(self.file_name_label)
        layout.addSpacing(10)

        # Other UI elements...

        # Save Button
        save_button = QtWidgets.QPushButton("Save Snip", self)  # Change button text to "Save Snip"
        save_button.clicked.connect(self.save_clicked)
        save_button.setToolTip("Save the snip with the specified file name, including selected nodes and metadata.")
        save_button.setStyleSheet("background-color: #FFA500; font-size: 18px; padding: 10px;")  # Change the color, font size, and padding here
        layout.addWidget(save_button)

        # New button for taking screenshots
        screenshot_button = QtWidgets.QPushButton("Take Screenshot", self)
        screenshot_button.clicked.connect(self.take_screenshot)
        layout.addWidget(screenshot_button)

        self.setLayout(layout)

        # Ensure the necessary directories exist
        self.create_directories()

        # Update the file name label with the default file name based on initial inputs
        self.update_file_name()

    def take_screenshot(self):
        # Get the selected region for the screenshot
        selected_region = self.select_region()

        if selected_region:
            # Capture the screenshot of the selected region
            img = ImageGrab.grab(bbox=selected_region)
            # Save the screenshot to a file
            img.save('screenshot.png')
            # Display a message indicating successful screenshot capture
            QtWidgets.QMessageBox.information(self, "Screenshot Taken", "Screenshot saved as 'screenshot.png'.")

    # Define the select_region method
    def select_region(self):
        # Prompt the user to use Houdini's built-in region selection tool
        hou.ui.displayMessage("Please use Houdini's built-in region selection tool to select the region for the screenshot.", title="Select Region", severity=hou.severityType.Message)

        # Return None as we don't have the region coordinates yet
        return None

    # Other existing methods...

if __name__ == "__main__":
    app = QtWidgets.QApplication.instance()
    if app is None:
        app = QtWidgets.QApplication([])

    # Create an instance of WriteSnipUI
    write_snip_ui_instance = WriteSnipUI()

    # Show the UI
    write_snip_ui_instance.show()

    try:
        # Run the application event loop
        while True:
            if not app.processEvents(QtCore.QEventLoop.AllEvents):
                break
    except Exception as e:
        print(f"Error: {e}")

    # Close the application when the loop exits
    app.quit()
